//
// This macro displays a histogram of
// energy deposited in the detector volume.
//

int main()
{
  // Open root file
  TFile *file = TFile::Open("./singleRun.root");

  // Write energy deposited to text file
  ((TTreePlayer*)(singleRun->GetPlayer()))->SetScanRedirect(true);
  ((TTreePlayer*)(singleRun->GetPlayer()))->SetScanFileName("1MeV_lXeEdep.out");
  singleRun->Scan("Edep", "Edep>0");

  // Stat box
  gStyle->SetOptStat("e");

  // Get max energy
  Double_t max = singleRun->GetMaximum("Edep");

  // Define histogram
  TH1D* hlXe = new TH1D("hlXe", "", 10000, 0., max);
  TH1D* hlXe2 = new TH1D("hlXe2", "", 10000, 0., 1);

  // Define cuts
  TCut *cut = new TCut("Edep > 0.");

  // Style
  hlXe->GetXaxis()->SetTitle("Energy Deposition (MeV)");
  hlXe->GetXaxis()->CenterTitle();
  hlXe->GetYaxis()->SetTitle("Number of Events");
  hlXe->GetYaxis()->CenterTitle();
  hlXe2->GetXaxis()->SetTitle("Energy Deposition (MeV)");
  hlXe2->GetXaxis()->CenterTitle();
  hlXe2->GetYaxis()->SetTitle("Number of Events");
  hlXe2->GetYaxis()->CenterTitle();

  // Draw histogram from ntuple
  TCanvas* canv1 = new TCanvas("c1");
  canv1->SetLogy();
  singleRun->Project("hlXe", "Edep", *cut);
  hlXe->Draw();

  TCanvas* canv2 = new TCanvas("c2");
  canv2->SetLogy();
  singleRun->Project("hlXe2", "Edep", *cut);
  hlXe2->Draw();
}

